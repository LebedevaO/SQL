1) Вывести абитуриентов, которые хотят поступать на образовательную программу «Мехатроника и робототехника» в отсортированном по фамилиям виде.
select name_enrollee from enrollee
join program_enrollee using(enrollee_id) 
join program using(program_id) 
where name_program = 'Мехатроника и робототехника'
order by name_enrollee; 

2)  Вывести образовательные программы, на которые для поступления необходим предмет «Информатика». Программы отсортировать в обратном алфавитном порядке.
select name_program from program 
join program_subject using(program_id)
join subject using(subject_id)
where name_subject = 'Информатика'
order by name_program desc;

3) Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету, максимальное, минимальное и среднее значение баллов по предмету ЕГЭ. 
Вычисляемые столбцы назвать Количество, Максимум, Минимум, Среднее. Информацию отсортировать по названию предмета в алфавитном порядке, 
среднее значение округлить до одного знака после запятой.

select name_subject, count(subject_id) as Количество, max(result) as Максимум, min(result) as Минимум, 
round(avg(result),1) as Среднее 
from enrollee_subject join subject using (subject_id) 
group by name_subject
order by name_subject;

4) Вывести образовательные программы, для которых минимальный балл ЕГЭ по каждому предмету больше или равен 40 баллам. Программы вывести в отсортированном по алфавиту виде.
select name_program from program join program_subject using (program_id) 
group by name_program
having min(min_result) >= 40
order by name_program;

5) Посчитать, сколько дополнительных баллов получит каждый абитуриент. Столбец с дополнительными баллами назвать Бонус. Информацию вывести в отсортированном по фамилиям виде.
select name_enrollee, ifnull(sum(bonus), 0) as Бонус from enrollee 
left join enrollee_achievement using(enrollee_id)
left join achievement using(achievement_id)
group by name_enrollee
order by name_enrollee;

6) Выведите сколько человек подало заявление на каждую образовательную программу и конкурс на нее (число поданных заявлений деленное на количество мест по плану), 
округленный до 2-х знаков после запятой. 
select name_department,name_program,plan,count(program_id) as Количество, round((count(program_id)/plan),2) as Конкурс
from department join program using(department_id)
join program_enrollee using(program_id)
group by name_department, name_program, plan
order by Конкурс desc;

7) Вывести образовательные программы, на которые для поступления необходимы предмет «Информатика» и «Математика» в отсортированном по названию программ виде.
select p.name_program from subject s
join program_subject ps on s.subject_id=ps.subject_id
join program p on p.program_id=ps.program_id
where name_subject in ('Математика', 'Информатика')
group by name_program
having count(*)=2;

8) Посчитать количество баллов каждого абитуриента на каждую образовательную программу, на которую он подал заявление, по результатам ЕГЭ. 
В результат включить название образовательной программы, фамилию и имя абитуриента, а также столбец с суммой баллов, который назвать itog.
select name_program,name_enrollee , sum(result) as itog 
from enrollee join program_enrollee on enrollee.enrollee_id = program_enrollee.enrollee_id
join program on program_enrollee.program_id = program.program_id
join program_subject on program.program_id = program_subject.program_id
join subject on program_subject.subject_id = subject.subject_id
inner join enrollee_subject on subject.subject_id = enrollee_subject.subject_id  and enrollee_subject.enrollee_id = enrollee.enrollee_id
group by name_program,name_enrollee
order by name_program, itog desc ;

9) Вывести название образовательной программы и фамилию тех абитуриентов, которые подавали документы на эту образовательную программу, но не могут быть зачислены на нее. 
select name_program,name_enrollee
from enrollee join program_enrollee on enrollee.enrollee_id = program_enrollee.enrollee_id
join program on program_enrollee.program_id = program.program_id
join program_subject on program.program_id = program_subject.program_id
join subject on program_subject.subject_id = subject.subject_id
inner join enrollee_subject on subject.subject_id = enrollee_subject.subject_id  and enrollee_subject.enrollee_id = enrollee.enrollee_id
where program_subject.min_result > enrollee_subject.result
group by name_program,name_enrollee
order by name_program;

10) Создать вспомогательную таблицу applicant,  куда включить id образовательной программы, id абитуриента, 
сумму баллов абитуриентов (столбец itog). 
Create table applicant as 
    select program_id, enrollee_id, SUM(result) as itog 
    FROM enrollee
     JOIN program_enrollee USING(enrollee_id)
     JOIN program USING(program_id)
     JOIN program_subject USING(program_id)
     JOIN subject USING(subject_id)
     JOIN enrollee_subject USING(enrollee_id, subject_id)
WHERE enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY program.program_id,enrollee.enrollee_id
ORDER BY program.program_id, itog DESC;

11) Из таблицы applicant удалить записи, если абитуриент на выбранную образовательную программу не набрал минимального балла хотя бы по одному предмету.
delete from applicant
using applicant INNER JOIN program_subject using(program_id) 
                inner join enrollee_subject USING (enrollee_id, subject_id)
where program_subject.min_result > enrollee_subject.result  ; 
